package com.formacionbdi.microservicios.app.respuestas.services;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.formacionbdi.microservicios.app.respuestas.clients.ExamenFeignClient;
import com.formacionbdi.microservicios.app.respuestas.models.entity.Respuesta;
import com.formacionbdi.microservicios.app.respuestas.models.repository.RespuestaRepository;
import com.formacionbdi.microservicios.commnos.examenes.models.entity.Examen;
import com.formacionbdi.microservicios.commnos.examenes.models.entity.Pregunta;

@Service
public class RespuestaServiceImpl implements RespuestaService {

	@Autowired
	private RespuestaRepository repositorio;
	
	@Autowired
	private ExamenFeignClient examenCliente;
	
	
	
	@Override
	@Transactional	// org.springframework.transaction.annotation.Transactional;
	public Iterable<Respuesta> guardarTodo(Iterable<Respuesta> respuestas) {

		return repositorio.saveAll(respuestas);
	}


	@Override
	@Transactional(readOnly = true)
	public Iterable<Respuesta> findRespuestaByAlumnoByExamen(Long alumnoId, Long examenId) {

		//return repositorio.findRespuestaByAlumnoByExamen(alumnoId, examenId);
		
		Examen examenIns = examenCliente.obtenerExamenPorId(examenId); // Cliente Feign; le pasa "examenId"
		
		List<Pregunta> preguntasIns = examenIns.getPreguntas(); // Obtenemos la preguntas a trav√©s del "examenIns"
		
		// Se convierte la lista de "preguntasIns" a lista con los IDs de preguntas
		List<Long> respuestasIdsIns = preguntasIns
				.stream() // convertir flujo de datos a otro tipo datos
				.map(p -> p.getId()) // obtenemos la pregunta y la cambiamos
				.collect(Collectors.toList());
		
		List<Respuesta> respuestasIns = (List<Respuesta>) repositorio.findRespuestaByAlumnoByPreguntaIds(alumnoId, respuestasIdsIns);
		
		respuestasIns = respuestasIns
				.stream()
				.map(r -> {
					preguntasIns.forEach(p -> {
						if(p.getId() == r.getPreguntaId()) {
							r.setPregunta(p);
						}
					});
					return r;
				})
				.collect(Collectors.toList());
		return respuestasIns;
	}


	@Override
	@Transactional(readOnly = true)
	public Iterable<Long> findExamenesIdsConRespuestasByAlumno(Long alumnoId) {

		//return repositorio.findExamenesIdsConRespuestasByAlumno(alumnoId);
		return null;
	}

}
